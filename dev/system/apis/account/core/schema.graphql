"""
Model.
"""
type Account {
	accountId: Int!
	accountName: String!
	publicUserId: String!
	defaultAccountProfileId: Int!
	defaultWorkspaceId: Int!
	createdAt: NaiveDateTime!
	lastLoginAt: NaiveDateTime!
	defaultAccountProfile: AccountProfile
	defaultWorkspace: Workspace
	accountProfiles: [AccountProfile!]!
	accountWorkspaces: [Workspace!]!
	groupMembers: [GroupMember!]!
}

"""
Model.
"""
type AccountProfile {
	accountProfileId: Int!
	accountId: Int!
	hash: String!
	name: String!
	affiliation: String
	bio: String
	email: String!
	birthdate: NaiveDateTime
	gender: Gender
	createdAt: NaiveDateTime!
	updatedAt: NaiveDateTime!
}


"""
Inputs.
"""
input CreateAccountInput {
	publicUserId: String!
	accountName: String!
}

"""
Inputs.
"""
input CreateAccountProfileInput {
	accountName: String!
	name: String!
	affiliation: String
	email: String!
	bio: String
	birthdate: NaiveDateTime
	gender: Gender
}


"""
Gender.
"""
enum Gender {
	MALE
	FEMALE
	OTHER
}

"""
Model.
"""
type GroupMember {
	groupMemberId: Int!
	groupId: Int!
	accountId: Int!
	accountProfileId: Int!
	role: Role!
}



"""
Mutation root.
"""
type MutationRoot {
	"""
	Creates accounts.
	"""
	createAccount(input: CreateAccountInput!): Account!
	"""
	Creates account profile.
	"""
	createAccountProfile(input: CreateAccountProfileInput!): AccountProfile!
}

"""
ISO 8601 combined date and time without timezone.

# Examples

* `2015-07-01T08:59:60.123`,
"""
scalar NaiveDateTime

"""
Query root.
"""
type QueryRoot {
	"""
	Gets an account.
	"""
	account(accountName: String!): Account
	"""
	Gets accounts.
	"""
	accounts(publicUserId: String!): [Account!]!
	"""
	Gets account profiles.
	"""
	accountProfiles(accountName: String!): [AccountProfile!]!
}

"""
Role.
"""
enum Role {
	ADMIN
	MEMBER
}


"""
Model.
"""
type Workspace {
	workspaceId: Int!
	workspaceName: String!
	createdAt: NaiveDateTime!
	updatedAt: NaiveDateTime!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: QueryRoot
	mutation: MutationRoot
}

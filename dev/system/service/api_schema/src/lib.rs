//------------------------------------------------------------------------------
/// API schemas.
//------------------------------------------------------------------------------

pub mod mypage;

use serde::{ Serialize, Deserialize };


//------------------------------------------------------------------------------
/// API response.
//------------------------------------------------------------------------------
#[derive(Debug, Serialize, Deserialize)]
pub struct ApiResponse<T>
{
    pub data: Result<T, String>,
}

impl<T> ApiResponse<T>
{
    //--------------------------------------------------------------------------
    /// OK response.
    //--------------------------------------------------------------------------
    pub fn ok( data: T ) -> Self
    {
        Self
        {
            data: Ok(data),
        }
    }

    //--------------------------------------------------------------------------
    /// NG response.
    //--------------------------------------------------------------------------
    pub fn ng( message: String ) -> Self
    {
        Self
        {
            data: Err(message),
        }
    }

    //--------------------------------------------------------------------------
    /// Checks if the response is OK.
    //--------------------------------------------------------------------------
    pub fn is_ok( &self ) -> bool
    {
        self.data.is_ok()
    }

    //--------------------------------------------------------------------------
    /// Checks if the response is NG.
    //--------------------------------------------------------------------------
    pub fn is_ng( &self ) -> bool
    {
        self.data.is_err()
    }

    //--------------------------------------------------------------------------
    /// Gets the data.
    //--------------------------------------------------------------------------
    pub fn get_data( &self ) -> &T
    {
        if let Ok(d) = &self.data
        {
            return d;
        }
        panic!("ApiResponse::get_data() failed.");
    }

    //--------------------------------------------------------------------------
    /// Gets the error message.
    //--------------------------------------------------------------------------
    pub fn get_error( &self ) -> String
    {
        if let Err(e) = &self.data
        {
            return e.clone();
        }
        "".to_string()
    }
}

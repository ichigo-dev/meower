//------------------------------------------------------------------------------
//! Configuration.
//------------------------------------------------------------------------------

use std::env;


//------------------------------------------------------------------------------
/// Config.
//------------------------------------------------------------------------------
#[derive(Clone)]
pub(crate) struct Config
{
    port: u16,
    database_url: String,
}

impl Config
{
    //--------------------------------------------------------------------------
    /// Initializes the configuration.
    //--------------------------------------------------------------------------
    pub(crate) fn init() -> Self
    {
        let port = env::var("PORT")
            .unwrap_or_else(|_| "8080".to_string())
            .parse::<u16>()
            .expect("PORT must be a number");

        let database_url = env::var("DATABASE_URL")
            .expect("DATABASE_URL must be set");

        Self
        {
            port,
            database_url,
        }
    }

    //--------------------------------------------------------------------------
    /// Gets the port.
    //--------------------------------------------------------------------------
    pub(crate) fn port(&self) -> u16
    {
        self.port
    }

    //--------------------------------------------------------------------------
    /// Gets the database URL.
    //--------------------------------------------------------------------------
    pub(crate) fn database_url(&self) -> String
    {
        self.database_url.clone()
    }
}
